#!/usr/bin/env bash

# Depends on:
# - pass
# - bash
# - xdotool >= 3 ( >= 2013-12-06 )

# Expand ALL the globs
shopt -s nullglob globstar

appname="$(basename "${0}")"

[ "${1}" == "--help" ] || [ "${1}" == "-h" ] && {

cat <<EOF

Retrieves a password from a password store (pass(1)) database, selected using
dmenu.

Usage: ${appname} --help|-h
       ${appname} [--type[=line]|-t[line]] [--case-sensitive|-c]


--help|-h           - Displays this help
--type|-t           - The output will be 'typed', as if it were entered with a
                      keyboard. If this option is not specified, the output will
                      be copied to the clipboard. If <line> is specified, the
                      remainder of the first line starting with <line> will be
                      copied, otherwise the password.
--case-sensitive|-c - Searches the password store in case sensitive format. By
                      default the search will be case INsensitive.

Example: ${appname} -t -c
EOF

    exit 0
}

case="-i"
while [ ${#} -gt 0 ]; do #{
    [ "${1:0:6}" == "--type" ] && {
        typeit="${1:6}"
        [ "${typeit:0:1}" == "=" ] && typeit="${typeit:1}"
        shift 1
        continue
    }

    [ "${1:0:2}" == "-t" ] && {
        typeit="${1:2}"
        shift 1
        continue
    }

    [ "${1}" == "--case-sensitive" ] || [ "${1}" == "-c" ] && {
        case=""
        shift 1
        continue
    }

    [ ${#} -gt 0 ] && {
        echo "ERROR: Unrecognised param(s): ${@}" >&2
        exit 128
    }
done #}

prefix=${PASSWORD_STORE_DIR-~/.password-store}
password_files=( "$prefix"/**/*.gpg )
password_files=( "${password_files[@]#"$prefix"/}" )
password_files=( "${password_files[@]%.gpg}" )

password=$(printf '%s\n' "${password_files[@]}" | dmenu ${case} "$@")

[ -z "${password}" ] && exit 129

# Is typeit set?
[ ! -z "${typeit+x}" ] || {
    # If not...
    exec pass show -c -- "${password}" 2>/dev/null
}

# Is typeit set but empty?
[ -z "${typeit}" ] && {
    pass show -c -- "${password}" &>/dev/null\
    && {
        xclip -o\
        |{ read -r pass; printf %s "$pass"; }\
        |xdotool type --clearmodifiers --file -
    }
    exit 0
}

pass show --clip="${typeit}" "${password}" &>/dev/null\
&& {
    xclip -o\
    |{ read -r pass; printf %s "$pass"; }\
    |xdotool type --clearmodifiers --file -
}

# vim:ts=4:tw=80:sw=4:et:ai:si
