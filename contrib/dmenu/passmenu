#!/usr/bin/env bash

# Expand ALL the globs
shopt -s nullglob globstar

appname="$(basename "${0}")"

[ "${1}" == "--help" ] || [ "${1}" == "-h" ] && {

cat <<EOF

Retrieves a password from a password store (pass(1)) database, selected using
dmenu.

Usage: ${appname} --help|-h
       ${appname} [--type|-t] [--case-sensitive|-c]


--help|-h           - Displays this help
--type|-t           - The output will be 'typed', as if it were entered with a
                      keyboard. If this option is not specified, the output will
                      be copied to the clipboard.
--case-sensitive|-c - Searches the password store in case sensitive format. By
                      default the search will be case INsensitive.

Example: ${appname} -t -c
EOF

    exit 0
}

typeit=0
case="-i"
while [ ${#} -gt 0 ]; do #{
    [ "${1}" == "--type" ] || [ "${1}" == "-t" ] && {
        typeit=1
        shift 1
        continue
    }

    [ "${1}" == "--case-sensitive" ] || [ "${1}" == "-c" ] && {
        case=""
        shift 1
        continue
    }

    [ ${#} -gt 0 ] && {
        echo "ERROR: Unrecognised param(s): ${@}" >&2
        exit 128
    }
done #}

prefix=${PASSWORD_STORE_DIR-~/.password-store}
password_files=( "$prefix"/**/*.gpg )
password_files=( "${password_files[@]#"$prefix"/}" )
password_files=( "${password_files[@]%.gpg}" )

password=$(printf '%s\n' "${password_files[@]}" | dmenu ${case} "$@")

[ -z "${password}" ] && exit 129

if [ "${typeit}" -eq 0 ]; then
    pass show -c -- "${password}" 2>/dev/null
else
# --file doesn't work for my xdotool (2.20110530.1)
#    pass show "${password}"\
#    |{ read -r pass; printf %s "$pass"; }\
#    |xdotool type --clearmodifiers --file -
    pass show "${password}"\
    |{ read -r pass; printf %s "type --clearmodifiers $pass"; }\
    |xdotool -
fi

# vim:ts=4:tw=80:sw=4:et:ai:si
